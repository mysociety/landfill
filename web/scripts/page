#!/usr/bin/perl -w -I../../../perllib -I../../perllib
#
# page:
# Render pages.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: page,v 1.4 2005-10-19 16:17:07 chris Exp $';

use strict;

require 5.8.0;

BEGIN {
    use mySociety::Config;
    mySociety::Config::set_file('../../conf/general');
}

use GIA;
use GIA::Web;
use GIA::Page::NewItem;

my %goodpage;
my %badpage;

sub internalerror ($) {
    my $q = shift;
    print $q->header(-status => '500 Internal error', -type => 'text/html'),
            "Internal error\n";
}

while (my $q = new GIA::Web()) {
    my $page = $ENV{REQUEST_URI} || '';
    $page =~ s/\?.*//;
    $page =~ s#^/##;
    if (!defined($page) || $page !~ m#^[A-Za-z0-9]+(/[A-Za-z0-9]+)*$#) {
        warn "value of REQUEST_URI not present or invalid\n";
        internalerror($q);
        next;
    }
    $page =~ s#/#::#g;
    if (exists($badpage{$page})) {
        warn "request for known-bad page $page\n";
        internalerror($q);
        next;
    } elsif (!exists($goodpage{$page})) {
        my $f = 0;
        eval {
            eval "require GIA::Page::$page;"; # I hate perl
            die $@ if ($@);
            no strict 'refs';
            if (exists &{"GIA::Page::${page}::render"}) {
                $f = 1;
            } else {
                warn "module GIA::Page::$page exists, but has no render function\n";
            }
        };
        if ($f) {
            $goodpage{$page} = eval "\\&GIA::Page::${page}::render";
        } else {
            warn "request for bad page $page ($@)\n";
            $badpage{$page} = 1;
            internalerror($q);
            next;
        }
    }
warn "query_string = " . $q->query_string() . "\n";
    my ($hdr, $content);
    $content = '';
    # If the page does its own rendering the render function will return true.
    if (!&{$goodpage{$page}}($q, \$hdr, \$content)) {
        print $hdr, $content;
    }
}
