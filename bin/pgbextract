#!/usr/bin/perl -w
#
# pgbextract:
# Extract data from pgblackbox's spool files and present information about the
# recorded state of the PostgreSQL server to the user.
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: pgbextract,v 1.5 2006-09-13 09:38:06 chris Exp $';

use strict;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use Carp;
use DateTime;
use DateTime::Format::Strptime;
use Getopt::Long;
use IO::Dir;
use Pod::Usage;
use POSIX qw(mktime strftime);

use PGBlackbox;

my $spool_dir = "/tmp/pgblackbox";

# dump_db_info H DATA CONDITIONS
#
sub dump_db_info ($$%) {
    my IO::Handle $h = shift;
    my $data = shift;

    my %filter = @_;
    my %permitted_filters = map { $_ => 1 } qw(AllClients Database);
    croak "Bad filter condition"
        if (grep { !exists($permitted_filters{$_}) } keys(%filter));

    # Iterate over databases, and, for each database, identify each client and
    # what it was doing at that point, what locks it was holding, and what
    # locks it was waiting for.
    
    my ($activity, $locks, $clients) = @$data;

    my %backendpid_by_database;
    my %activity_by_backendpid;
    my %client_by_backendpid;

    foreach (@$activity) {
        $activity_by_backendpid{$_->[2]} = $_;
        push(@{$backendpid_by_database{$_->[1]}}, $_->[2]);
    }

    foreach (@$clients) {
        $client_by_backendpid{$_->[0]} = $_; # XXX assumes handle unshared
    }

    my @dbs;
    if (exists($filter{Database})) {
        @dbs = ($filter{Database});
    } else {
        @dbs = sort(keys(%backendpid_by_database));
    }

    foreach my $database (@dbs) {
        $h->print("$database:\n");
        foreach my $backendpid (@{$backendpid_by_database{$database}}) {
            my $activity = $activity_by_backendpid{$backendpid};
            my $client = $client_by_backendpid{$backendpid};

            # Obtain locks held and waited for, excluding clients' locks on
            # their own current transactions.
            my @waitingfor = grep { $_->[3] == $backendpid && !$_->[5] } @$locks;
            my @holding = grep { $_->[3] == $backendpid && $_->[5] && $_->[0] } @$locks;
                # XXX should probably only show locks for which other clients
                # are waiting, rather than all locks held.

            next unless (@waitingfor || @holding || exists($filter{AllClients}));
            
            $h->print("  DB user $activity->[4]; backend PID $backendpid; ");
            if ($client) {
                $h->print("client PID $client->[8] on host $client->[1] (child of $client->[9])\n");
                my $cmd = join(' ', map { / / ? (/'/ ? qq("$_") : qq('$_')) : $_ } @{$client->[12]});
                $h->print("    prog $cmd\n");
                $h->print("    in $client->[14]; UID:GID $client->[10]:$client->[11]\n");
            } else {
                $h->print("client unknown\n");
            }
            $h->print("    currently: $activity->[5]\n");

            if (@waitingfor) {
                $h->print("    waiting for:\n");
                foreach (@waitingfor) {
                    my ($table, $database, $transaction, $pid, $mode) = @$_;
                    if ($table) {
                        $h->print("      $mode on $database.$table\n");
                        # Figure out who holds this.
                        my ($holder) = grep { $_->[0] && $_->[0] eq $table && $_->[1] eq $database && $_->[5] } @$locks;
                        $h->print("        blocked by backend PID $holder->[3] holding $holder->[4]\n");
                    } else {
                        $h->print("      completion of transaction #$transaction\n");
                        my ($holder) = grep { $_->[2] && $_->[2] == $transaction && $_->[5] } @$locks;
                        $h->print("        being executed by backend PID $holder->[3]\n");
                    }
                }
            }

            if (@holding) {
                $h->print("    holding:\n");
                foreach (@holding) {
                    my ($table, $database, $transaction, $pid, $mode) = @$_;
                    $h->print("      $mode on $database.$table\n");
                }
            }

            $h->print("\n");
        }
    }
}

my $debug = 0;
sub debug (@) {
    return unless ($debug);
    print STDERR "pgbextract: ", @_, "\n";
}
my $help = 0;
my $database = undef;
my $allclients = 0;
my $before;
my $after;
if (!GetOptions(
        debug =>            \$debug,
        help =>             \$help,
        'database=s' =>     \$database,
        'all-clients' =>    \$allclients,
        before =>           \$before,
        after =>            \$after)) {
    print STDERR "pgbextract: bad options; try --help for help\n";
    exit(1);
}

if ($help) {
    pod2usage(-exitval => 0, -verbose => 1);
    exit(0);
}

if ($before && $after) {
    print STDERR "pgbextract: cannot use both --before and --after\n";
    exit(1);
}

my %filter;
$filter{AllClients} = 1 if ($allclients);
$filter{Database} = $database if ($database);

my $searchmode;
if ($before) {
    $searchmode = -1;
} elsif ($after) {
    $searchmode = +1;
} else { # nearest
    $searchmode = 0;
}

if (1 != @ARGV) {
    print STDERR "pgbextract: single argument should be time; try --help for help\n";
    exit(1);
}

my $time = $ARGV[0];

if ($time !~ /^([1-9]\d{3})(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d)$/) {
    print STDERR "pgbextract: time format is YYYYmmddTHHMMSS\n";
    exit(1);
}

my $epoch = mktime($6, $5, $4, $3, $2 - 1, $1 - 1900) - 3600;

debug("time $time -> epoch $epoch -> " . strftime('%Y%m%dT%H%M%S', localtime($epoch)));

# Locate possible files. These are named for their start times, so we might
# need to look on the day before the specified time too.
my %files = ( );
foreach my $dir (map { $spool_dir . strftime('/%Y/%m/%d', localtime($_)) } ($epoch - 86400, $epoch)) {
    debug("looking for spool files in $dir");
    my $D = new IO::Dir($dir);
    next unless ($D);
    while (defined(my $fn = $D->read())) {
        my $fn2 = $fn;
        $fn2 =~ s/\.(bz2|gz)$//;
        $files{$fn2} = "$dir/$fn"; 
    }
}

my $timefn = "$time.pgb";
my @starttimes = sort(keys(%files));
my @files = ( );

# Find last file started before query time.
my ($il, $ih) = (0, $#starttimes);
while ($ih > $il + 1) {
    my $i = int(($il + $ih) / 2);
    if ($starttimes[$i] le $timefn) {
        $il = $i;
    } else {
        $ih = $i;
    }
}
push(@files, $files{$starttimes[$il]});
push(@files, $files{$starttimes[$il + 1]})
    if ($searchmode != -1 && $il < $#starttimes);

if (!@files) {
    print STDERR "pgbextract: no spool files found for that time\n";
    exit(1);
}
debug("relevant spool files: ", join(", ", @files));

my @ff;
foreach (@files) {
    debug("opening $_...");
    my $f = PGBlackbox::Spoolfile->open($_);
    if (!ref($f)) {
        print STDERR "pgbextract: $_: $f\n";
        exit(1);
    }
    push(@ff, $f);
}

my @d;
if ($searchmode != +1) {
    # Find before data.
    my $i = $ff[0]->findslot($epoch, -1);
    if (defined($i)) {
        push(@d, [scalar($ff[0]->slot($i)), $ff[0]->get($i)]);
        debug("slot before is $i in ", $ff[0]->name(), " at epoch ", scalar($ff[0]->slot($i)));
    } else {
        debug("no before slot found");
    }
}
if ($searchmode != -1) {
    my $i = $ff[0]->findslot($epoch, +1);
    if (defined($i)) {
        push(@d, [scalar($ff[0]->slot($i)), $ff[0]->get($i)]);
        debug("slot after is $i in ", $ff[0]->name(), " at epoch ", scalar($ff[0]->slot($i)));
    } elsif (@ff == 2 && defined($i = $ff[1]->findslot($epoch, +1))) {
        push(@d, [scalar($ff[1]->slot($i)), $ff[1]->get($i)]);
        debug("slot after is $i in ", $ff[1]->name(), " at epoch ", scalar($ff[1]->slot($i)));
    } else {
        debug("no after slot found");
    }
}

my $i = 0;
if ($searchmode == 0 && @ff == 2) {
    $i = 1 if (abs($epoch - $ff[1]->[0]) < abs($epoch - $ff[0]->[0]));
} elsif (0 == @ff) {
    print STDERR "pgbextract: cannot find any relevant record\n";
    exit(1);
}

print "At time ", strftime('%Y%m%dT%H%M%S', localtime($d[$i]->[0])), "\n\n";
dump_db_info(\*STDOUT, $d[$i]->[1], %filter);

__END__

=head1 NAME

pgbextract

=head1 SYNOPSIS

pgbextract --help | [OPTIONS] TIME

=head1 DESCRIPTION

Extract recorded data about the state of a PostgreSQL database server at a
given TIME and display it. TIME should be a full ISO timestamp
(YYYYmmddTHHMMSS) and is interpreted in I<local time>.

=head1 OPTIONS

=over 4

=item --help

Display information about using the program.

=item --debug

Print debugging information while extracting the data.

=item --spool-dir DIRECTORY

Look for pgblackbox spool files in DIRECTORY, rather than the configured
default.

=item --all-clients

Show all clients of the database, rather than just those which are holding or
waiting for locks.

=item --database DATABASE

Show information only for the named DATABASE, rather than for all databases.

=item --before

=item --after

Display information from the last snapshot before the given time, or the first
snapshot after it, rather than the nearest.

=back
